{
  "openapi": "3.0.0",
  "info": {
    "title": "Ferguson's Pricing API",
    "description": "### The Pricing API allows you to get pricing for your defined product offering.\n\n\nFetch prices for a single product based on Id:\n```js\n[GET]/v2/prices/products/{productId}?customerId={string}&regionCode={string}&locationId={string}&qty={integer}\n```\n\nBulk pricing endpoint can handle up to 100 Product Ids:\n```js\n[POST]/v2/prices/products\n```\n------\n\n### Price Definitions:\n* listPrice - suggested price from the manufacturer\n* sellPrice - calculated price after taxes and discounts have been applied\n",
    "contact": {
      "name": "Ferguson API Support",
      "url": "https://developer.ferguson.com/support",
      "email": "api.team@ferguson.com"
    },
    "version": "2.0.1"
  },
  "servers": [
    {
      "url": "https://uatapi2.ferguson.com/v2/prices"
    }
  ],
  "security": [
    {
      "oAuth2ClientCredentials": []
    }
  ],
  "tags": [
    {
      "name": "Product Pricing",
      "description": "Returns specific pricing information based on Product Ids."
    }
  ],
  "paths": {
    "/products": {
      "post": {
        "tags": [
          "Product Pricing"
        ],
        "summary": "Fetches pricing for one or more products.",
        "description": "Returns an array of product ids and prices.",
        "operationId": "priceProducts",
        "parameters": [
          {
            "name": "trans-id",
            "in": "header",
            "description": "Transaction ID sent with request",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pricingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns successful response with pricing information found",
            "headers": {
              "trans-id": {
                "description": "Transaction Id (passed in by consumer or generated by the service)",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricingResponse"
                }
              }
            }
          },
          "204": {
            "description": "No content",
            "headers": {
              "trans-id": {
                "description": "Transaction Id (passed in by consumer or generated by the service)",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "206": {
            "description": "Return bulk pricing array with partial content",
            "headers": {
              "trans-id": {
                "description": "Transaction Id (passed in by consumer or generated by the service)",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricingResponsePartial"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Payload/ Parameters",
            "headers": {
              "trans-id": {
                "description": "Transaction Id (passed in by consumer or generated by the service)",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "fe-resp-code": {
                "description": "Response code",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                },
                "example": "severe.error"
              },
              "fe-resp-msg": {
                "description": "Response message",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                },
                "example": "Severe Error"
              },
              "trans-id": {
                "description": "Transaction Id (passed in by consumer or generated by the service)",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "Product Pricing"
        ],
        "summary": "Fetches pricing for a single product.",
        "description": "Returns a price for a single product id.",
        "operationId": "getPrice",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Id number of a Product",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regionCode",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Id number of a Location/Warehouse",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qty",
            "in": "query",
            "description": "Quantity of Product to be priced",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "uom",
            "in": "query",
            "description": "Unit of measure for this product.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productIDType",
            "in": "query",
            "description": "Type of Product ID.  M for Master and A for Alt Code.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trans-id",
            "in": "header",
            "description": "Transaction ID sent with request",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns successful response with pricing information found",
            "headers": {
              "trans-id": {
                "description": "Transaction Id (passed in by consumer or generated by the service)",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricingResponse"
                }
              }
            }
          },
          "204": {
            "description": "No content",
            "headers": {
              "trans-id": {
                "description": "Transaction Id (passed in by consumer or generated by the service)",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Payload/ Parameters",
            "headers": {
              "trans-id": {
                "description": "Transaction Id (passed in by consumer or generated by the service)",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "fe-resp-code": {
                "description": "Response code",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                },
                "example": "severe.error"
              },
              "fe-resp-msg": {
                "description": "Response message",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                },
                "example": "Severe Error"
              },
              "trans-id": {
                "description": "Transaction Id (passed in by consumer or generated by the service)",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "pricingRequest": {
        "title": "productPricingRequest",
        "required": [
          "customerId",
          "locationId",
          "product",
          "regionCode"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "title": "Customer Id",
            "minLength": 1,
            "type": "string",
            "description": "Id of Customer",
            "example": "145342",
            "x-validation-required-err-code": "dataerror.k8.app.customer.id.required",
            "x-validation-length-err-code": "dataerror.k8.app.customer.id.is.empty"
          },
          "regionCode": {
            "title": "Customer Account/Logon Id",
            "minLength": 1,
            "type": "string",
            "description": "Logon/Branch of Customer",
            "example": "DALLAS",
            "x-validation-required-err-code": "dataerror.k8.app.customer.acct.id.required",
            "x-validation-length-err-code": "dataerror.k8.app.customer.acct.id.is.empty"
          },
          "contractId": {
            "title": "Contract Id",
            "type": "string",
            "description": "Contract Id specific to Customer",
            "example": "0000"
          },
          "locationId": {
            "title": "Ship Warehouse Id",
            "minLength": 1,
            "pattern": "^[0-9]{1,4}$",
            "type": "string",
            "description": "Location/Warehouse Id",
            "example": "1262",
            "x-validation-required-err-code": "dataerror.k8.app.ship.whse.id.required",
            "x-validation-length-err-code": "dataerror.k8.app.ship.whse.id.is.empty",
            "x-validation-pattern-err-code": "dataerror.k8.app.ship.whse.id.not.numeric"
          },
          "product": {
            "title": "Product(s) to be Priced",
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/productReq"
            },
            "x-validation-required-err-code": "dataerror.k8.app.product.list.required"
          }
        }
      },
      "productReq": {
        "title": "Product to be Priced",
        "required": [
          "productId",
          "qty"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "title": "Product Id",
            "type": "string",
            "example": "31523"
          },
          "qty": {
            "title": "Quantity of Product",
            "type": "integer",
            "description": "Quantity of Product",
            "example": 41567
          },
          "uom": {
            "title": "Unit of Measure",
            "type": "string",
            "description": "Unit of measure for this product. If not provided defaults to uom at zero level fulfillment",
            "example": "EA"
          },
          "productIDType": {
            "title": "Product ID Type",
            "type": "string",
            "description": "Indicates the type of productId provided. Default M-Master, A-Alt Code",
            "default": "M",
            "enum": [
              "A",
              "M"
            ]
          }
        }
      },
      "pricingResponse": {
        "title": "pricingResponse",
        "required": [
          "product"
        ],
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "example": "USD",
            "enum": [
              "USD"
            ]
          },
          "product": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/productResp"
            }
          }
        }
      },
      "productResp": {
        "title": "Pricing Response",
        "type": "object",
        "properties": {
          "productId": {
            "title": "Product Id",
            "type": "string",
            "example": "31523"
          },
          "masterProductID": {
            "title": "Master Product Id",
            "type": "string",
            "description": "The Master Product ID, that request productId was translated to, if productReq.productIDType is other than M. If M or not provided this will be the same as productReq.productId",
            "example": "31523"
          },
          "uom": {
            "title": "Unit of Measure",
            "type": "string",
            "example": "EA"
          },
          "perQty": {
            "title": "UOM Per Qty",
            "type": "integer",
            "description": "Number of actual products per UOM",
            "format": "int32",
            "example": 1
          },
          "listPrice": {
            "title": "List Price",
            "type": "number",
            "format": "float",
            "example": 34
          },
          "sellPrice": {
            "title": "Sell Price",
            "type": "number",
            "format": "float",
            "example": 66.67
          }
        }
      },
      "pricingResponsePartial": {
        "title": "pricingResponse",
        "required": [
          "product"
        ],
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "example": "USD",
            "enum": [
              "USD"
            ]
          },
          "product": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/productRespPartial"
            }
          }
        }
      },
      "productRespPartial": {
        "title": "Pricing Response",
        "type": "object",
        "properties": {
          "productId": {
            "title": "Product Id",
            "type": "string",
            "example": "90987"
          },
          "listPrice": {
            "title": "List Price",
            "type": "number",
            "format": "float",
            "example": 0
          },
          "pricingError": {
            "title": "Pricing Error Message",
            "type": "string",
            "description": "Contains a message indicating any error during pricing of this Product.",
            "example": "true"
          }
        }
      },
      "validationError": {
        "title": "Validation Error",
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "errorMsg": {
            "type": "string"
          },
          "field": {
            "type": "string"
          }
        }
      },
      "badRequestResponse": {
        "title": "Validation Error Response",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/validationError"
        }
      }
    },
    "securitySchemes": {
      "oAuth2ClientCredentials": {
        "type": "oauth2",
        "description": "This API uses OAuth 2.0 client credentials grant type. You must use a Content-Type header of 'application/x-www-form-urlencoded' with form parameters of grant_type=client_credentials.\n\nYou can also specify an additional form parameter of 'expires_in' so long as it is less than 3600 seconds.\n&nbsp;\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://uatapi2.ferguson.com/oauth2/token",
            "scopes": {}
          }
        }
      }
    }
  }
}